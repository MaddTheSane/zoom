#!../bin/cgijacl
#processed:424

# -----------------------------------------------------------------------------

constant status_window 0
constant game_title		"The Team Shabby Bumper Sticker Co Ltd Pty Inc"
constant game_author	"Stuart Allen"
constant game_release    1
constant game_build      1
constant ifid			"JACL-032"

# -----------------------------------------------------------------------------

integer temp
integer INDEX
integer editing
integer now
integer gmt
integer errors

integer last_sticker			0

constant VIEW           		1
constant SEARCH					2
constant CREATE					3

constant tab_names "Stickers" "View"

string id_data
string sticker_data
string sticker_error
string search_data

parameter id			id_data
parameter sticker		sticker_data
parameter search		sticker_data

{+links_div
write "JACL"
}

{+intro
set player = you

# GET THE LAST TASK ID
set last_sticker = 0
iterate data
set last_sticker = field[0]
enditerate

execute "+before"
execute "+after"
}

grammar blankjacl >blankjacl

{+blankjacl
}

grammar delete $integer >delete

{+delete
update data
if field[0] != $integer
insert field[0] field[1]
else
write "Sticker ~" field[1] "~ deleted.^^"
endif
endupdate
}

grammar edit $integer >edit

{+edit
set editing = true
execute "+skip_to_sticker<$integer"
execute "+edit_form"
}

{+skip_to_sticker
iterate data
if field[0] = $integer
return
endif
enditerate
}

{+before
ifstring id_data = ""
setstring id_data "NULL"
endif
ifstring sticker_data = ""
setstring sticker_data "NULL"
endif
if WEBAPP_mode = SEARCH
execute "+display_search"
endif
if WEBAPP_mode = VIEW
execute "+display_quickadd"
endif
return false
}

{+after
if WEBAPP_mode = CREATE
execute "+create_form"
endif
if WEBAPP_mode = VIEW
execute "+display_stickers"
endif
set editing = false

# CLEAR THE PARAMETERS
setstring id_data				"NULL"
setstring sticker_data		    "NULL"
setstring search_data			""
}

{+display_search
write "<form>"
execute "+text_submit<Search<search<60<search_data"
write "<input type=~hidden~ name=~command~ value=~search~/>"
hidden
write "</form>"
write "<hr>"
}

{+display_quickadd
write "<form name=~addform~>"
execute "+text<New sticker<sticker<60"
write "<input type=~submit~ value=~Add~"
write "<input type=~hidden~ name=~command~ value=~quickadd~/>"
hidden
write "</form>"
write "<hr>"
print
<script type="text/javascript" language="JavaScript">
document.forms['addform'].elements['sticker'].focus();
</script>
.
}

{+create_form
write "<form>"

execute "+text<Description<description<60<field[1]"
execute "+text<Project<project<30<field[2]"
execute "+text<Dependency<dependency<30<field[3]"
execute "+text<Start date<startdate<30<field[4]"
execute "+text_submit<Due date<duedate<30<field[5]"

write "<input type=~hidden~ name=~command~ value=~add~/>"
hidden
write "</form>
}

grammar add >add_sticker

{+add_sticker
set last_sticker + 1
append data last_sticker sticker_data
}

integer matches

string action

grammar quickadd >quickadd

{+quickadd
set WEBAPP_mode = VIEW
execute "+add_sticker"
}

grammar search >search

{+search
set WEBAPP_mode = SEARCH
set matches = 0
write "<table width=~100%~ class=~customer~>"
write "<tr>"
write "<th>ID</th>"
write "<th>Test</th>"
write "<th>ACTION</th>"
write "</tr>"

iterate data
ifstring field[1] contains search_data
execute "+display_sticker"
set matches + 1
endif
enditerate
write "</table>"

if matches = 0
write "^No matching stickers found.^"
endif
if matches = 1
write "^1 matching task found.^"
endif
if matches > 1
write "^" matches " matching stickers found.^"
endif
}

{+display_stickers
iterate data
execute "+display_sticker"
enditerate
}

{+display_sticker
write "<div class=~sticker_body~>"
write "<div class=~left_logo~><img src=~/images/DangarIslandLogo.png~></div>"
write "<div class=~right_logo~><img src=~/images/DangarIslandLogo.png~></div>"
write "<div class=~sticker_text~>" field[1] "</div>"
write "<div class=~di_text~>DANGAR ISLAND</div>"
write "</div>"
setstring action "delete " field[0]
hyperlinkNE "Delete above sticker" action
}

{+local_styles
print
div.sticker_body {
position: relative;
margin: 10px;
padding: 10px;
border: none;
text-align: center;
height: 150px;
width: 1200px;
font-family: Verdana, Arial, Sanserif;
font-size: 16pt;
background-color: #ffffff; }^
div.left_logo {
padding-top: 19px;
position: absolute;
left: 5; }^
div.right_logo {
padding-top: 19px;
position: absolute;
right: 5px; }^
div.sticker_text {
padding-top: 30px;
text-align: center;
font-family: Verdana, Arial, Sanserif;
font-size: 32pt;
color: #444444; }^
div.di_text {
padding-top: 15px; } ^
.
}

location boardroom

object you

constant title_image        "none"
constant footer_image       "none"
constant header_colour      "#000000"
constant header_height      87
constant linkbar_colour     "#c0b098"
constant maintext_colour    "#dddddd"
constant tab_colour         "#60594e"

# FORMS library

integer FORMS_length
integer FORMS_index
string  FORMS_string
string  FORMS_error
string  FORMS_data

{+textarea
# arg[0] = field name
# arg[1] = columns
# arg[2] = rows

write "<textarea name=~" string_arg[0] "~ class=~jaclform~ rows=~" arg[2] "~ cols=~" arg[1] "~ maxlength=~255~>"
write "</textarea>"
}

{+text : +text_submit
# arg[0] = label
# arg[1] = field name
# arg[2] = size
# arg[3] = optional starting value

setstring FORMS_error string_arg[1] "_error"
setstring FORMS_data string_arg[1] "_data"

write "<div class=~row~>"
write "<div class=~label~>" string_arg[0] ":</div>"
write "<div class=~input~>"
if @arg = 4
if errors = 0
write "<input type=~text~ name=~" string_arg[1] "~ value=~" string_arg[3] "~ class=~jaclform~ size=~" arg[2] "~ maxlength=~254~/>"
else
write "<input type=~text~ name=~" string_arg[1] "~ value=~" %FORMS_data "~ class=~jaclform~ size=~" arg[2] "~ maxlength=~254~/>"
endif
else
if errors = 0
write "<input type=~text~ name=~" string_arg[1] "~ class=~jaclform~ size=~" arg[2] "~ maxlength=~254~/>"
else
write "<input type=~text~ name=~" string_arg[1] "~ value=~" %FORMS_data "~ class=~jaclform~ size=~" arg[2] "~ maxlength=~254~/>"
endif
endif
write "</div>"
ifstring function_name = "+text_submit"
write "<div class=~input~><input type=~submit~></div>"
endif
ifstring %FORMS_error != ""
write "<div class=~error~>" %FORMS_error "</div>"
endif
write "</div>"
}

{+select : +select_num
# arg[0] = label
# arg[1] = field name
# arg[2] = starting value as integer

setstring FORMS_error string_arg[1] "_error"
setstring FORMS_data string_arg[1] "_data"

write "<div class=~row~>"
write "<div class=~label~>" string_arg[0] ":</div>"
write "<div class=~input~>"
write "<select name=~" string_arg[1] "~ class=~jaclform~>"
# GET THE NUMBER OF OPTIONS TO DISPLAY
setstring FORMS_string "@" string_arg[1] "_values"
set FORMS_length = FORMS_string

set FORMS_index = 0
while FORMS_index < FORMS_length
setstring FORMS_string string_arg[1] "_values[" FORMS_index "]"
ifstring function_name = "+select_num"
ifall @arg = 3 : FORMS_index = arg[2]
write "<option selected=~selected~ value=~" FORMS_index "~>" %FORMS_string "</option>^"
else
write "<option value=~" FORMS_index "~>" %FORMS_string "</option>^"
endif
else
write "<option value=~" %FORMS_string "~>" %FORMS_string "</option>^"
endif
set FORMS_index + 1
endwhile
write "</select>"
write "</div>"
write "</div>"
}

{+radio
# arg[0] = field name
# arg[1] = value

write "<input type=~radio~ class=~jaclradio~ name=~" string_arg[0] "~/>" string_arg[1]
}

{+checkbox
# arg[0] = field name
# arg[1] = value

write "<input type=~checkbox~ class=~jaclform~ name=~" string_arg[0] "~/>" string_arg[1]
}
# TIME library
# by Stuart Allen

# USAGE
# PASS +process_epoch A SINGLE INTEGER REPRESENTING A 'UNIXTIME', IE. THE
# NUMBER OF SECONDS SINCE JANUARY 1 1970
# THIS WILL THEN POPULATE THE FOLLOWING INTEGERS
# TIME_year, TIME_month, TIME_date, TIME_day, TIME_hour and TIME_minute
# ALL THE MACROS PROVIDED IN THIS LIBRARY CAN BE CALLED ON THE 'unixtime'
# INTEGER. ie
# set now = "+adjusted_time<unixtime" # ADJUSTS FOR THE CONFIGURED TIMEZONE
# write now{full_date} "^"

constant TIME_CONST_minute		60
constant TIME_CONST_hour		3600
constant TIME_CONST_day			86400
constant TIME_CONST_week		604800
constant TIME_CONST_month 		2629743
constant TIME_CONST_year		31536000
constant TIME_CONST_year_leap	31622400

# THE CYCLE OF LEAP AND NON-LEAP YEARS STARTING FROM 1970
constant TIME_CONST_year_cycle 31536000 31536000 31622400 31536000

# THESE ARE THE LENGTHS OF THE MONTHS IN SECONDS FOR NORMAL AND LEAP YEARS
constant TIME_CONST_lengths 2678400 2419200 2678400 2592000 2678400 2592000
constant TIME_CONST_lengths 2678400 2678400 2592000 2678400 2592000 2678400
constant TIME_CONST_lenleap 2678400 2505600 2678400 2592000 2678400 2592000
constant TIME_CONST_lenleap 2678400 2678400 2592000 2678400 2592000 2678400

# THESE ARE THE LENGTHS OF THE MONTHS IN DAYS FOR NORMAL AND LEAP YEARS
constant TIME_CONST_daynum		31 28 31 30 31 30 31 31 30 31 30 31
constant TIME_CONST_daynumleap	31 29 31 30 31 30 31 31 30 31 30 31

# 0 = 1700-1799
constant TIME_century_starts 	4 2 0 6 4 2 0 6 4 2

constant TIME_month_starts		0 3 3 6 1 4 6 2 5 0 3 5
constant TIME_month_starts_leap	6 2 3 6 1 4 6 2 5 0 3 5

integer TIME_epoch	false
integer TIME_temp
integer TIME_index
integer TIME_day
integer TIME_minute
integer TIME_hour
integer TIME_date
integer TIME_week
integer TIME_month
integer TIME_year
integer TIME_leapyear
integer TIME_remainder
integer TIME_minute_sec
integer TIME_hour_sec
integer TIME_date_sec
integer TIME_week_sec
integer TIME_month_sec
integer TIME_year_sec
integer TIME_century
integer TIME_century_remainder
integer TIME_now

integer TIME_timezone 20

string_array TIME_chunk	5

string TIME_CONST_months "January" "February" "March" "April" "May" "June"
string TIME_CONST_months "July" "August" "September" "October" "November" "December"

string TIME_CONST_days "Sunday" "Monday" "Tuesday" "Wednesday" "Thursday" "Friday" "Saturday"

string TIME_buffer

{+macro_integer_date
execute "+process_epoch<arg[0]"
setstring return_value TIME_date "/" TIME_month "/" TIME_year
}

{+macro_full_date
execute +macro_day<arg[0]
setstring TIME_buffer return_value
addstring TIME_buffer " "
execute +macro_date<arg[0]
addstring TIME_buffer return_value
addstring TIME_buffer " "
execute +macro_month<arg[0]
addstring TIME_buffer return_value
addstring TIME_buffer " "
execute +macro_year<arg[0]
addstring TIME_buffer return_value
setstring return_value TIME_buffer
}

{+macro_time
execute +macro_hour<arg[0]
setstring TIME_buffer return_value
addstring TIME_buffer ":"
execute +macro_minute<arg[0]
addstring TIME_buffer return_value
setstring return_value TIME_buffer
}

{+macro_minute
execute "+process_epoch<arg[0]"
if TIME_minute < 10
setstring return_value "0"
addstring return_value TIME_minute
else
setstring return_value TIME_minute
endif
}

{+macro_hour
execute "+process_epoch<arg[0]"
if TIME_hour < 10
setstring return_value "0"
addstring return_value TIME_hour
endif
setstring return_value TIME_hour
}

{+process_epoch
if TIME_epoch = arg[0]
# ALREADY PROCESSED, USED CACHED RESULT
return
endif
set TIME_epoch = arg[0]
execute "+get_century<arg[0]"
# NOTE: +get_century CALLS +get_year
execute "+is_leap_year?<TIME_year"
# NOW GET THE MONTH
set TIME_month = TIME_remainder
if TIME_leapyear = true
set TIME_index = 0
while TIME_month => TIME_CONST_lenleap[TIME_index]
set TIME_month - TIME_CONST_lenleap[TIME_index]
set TIME_index + 1
endwhile
else
set TIME_index = 0
while TIME_month => TIME_CONST_lengths[TIME_index]
set TIME_month - TIME_CONST_lengths[TIME_index]
set TIME_index + 1
endwhile
endif
# STORE THE REMAINDER OF THE MONTH THAT IS LEFT
set TIME_date = TIME_month
# TIME_month NOW HOLDS THE INDEX TO THE NAME OF THE MONTH
set TIME_month = TIME_index
# STORE WHAT IS LEFT OF THE MONTH AFTER THE DAYS ARE REMOVED
set TIME_remainder = TIME_date % TIME_CONST_day
# NOW GET THE DATE AND STORE IT
set TIME_date / TIME_CONST_day
# DAYS ARE ONE-BASED NOT ZERO-BASED
set TIME_date + 1
# NOW GET THE DAY OF THE WEEK
set TIME_day = 0
set TIME_day + TIME_century_starts[TIME_century]
set TIME_day + TIME_century_remainder
set TIME_temp = TIME_century_remainder / 4
set TIME_day + TIME_temp
if TIME_leapyear = true
set TIME_day + TIME_month_starts_leap[TIME_month]
else
set TIME_day + TIME_month_starts[TIME_month]
endif
set TIME_day + TIME_date
set TIME_day % 7
# NOW GET THE TIME
set TIME_hour = TIME_remainder % TIME_CONST_day / TIME_CONST_hour
set TIME_minute = TIME_remainder % TIME_CONST_hour / TIME_CONST_minute
}

{+macro_day
execute "+process_epoch<arg[0]"
setstring return_value TIME_CONST_days[TIME_day]
}

{+macro_date
execute "+process_epoch<arg[0]"
setstring return_value TIME_date
execute "+suffix<TIME_date"
}

{+suffix
set TIME_temp = arg[0] % 10
if TIME_temp = 1
addstring return_value "st"
return
endif
if TIME_temp = 2
addstring return_value "nd"
return
endif
if TIME_temp = 3
addstring return_value "rd"
return
endif
addstring return_value "th"
}

{+macro_month
execute "+process_epoch<arg[0]"
setstring return_value TIME_CONST_months[TIME_month]
}

{+macro_year
execute "+process_epoch<arg[0]"
setstring return_value TIME_year
}

{+get_year
set TIME_temp = arg[0]
set TIME_index = 0
set TIME_year = 0
while TIME_temp => TIME_CONST_year_cycle[TIME_index]
set TIME_temp - TIME_CONST_year_cycle[TIME_index]
set TIME_index + 1
set TIME_year + 1
if TIME_index = 4
set TIME_index = 0
endif
endwhile
set TIME_year + 1970
set TIME_remainder = TIME_temp
return TIME_year
}

{+is_leap_year?
set TIME_temp = arg[0]
set TIME_temp % 400
if TIME_temp = 0
set TIME_leapyear = true
return true
endif
set TIME_temp = TIME_year % 100
if TIME_temp = 0
set TIME_leapyear = false
return false
endif
set TIME_temp = TIME_year % 4
if TIME_temp = 0
set TIME_leapyear = true
return true
else
set TIME_leapyear = false
return false
endif
}

{+get_century
execute "+get_year<arg[0]"
set TIME_century_remainder = TIME_year % 100
set TIME_century = TIME_year / 100
# CONVERT THE CENTURY TO AN INDEX INTO THE CENTURIES ARRAY
set TIME_century - 17
return TIME_century
}

{+adjusted_time
# ADD THE LOCAL TIMZONE TO THE TIME SUPPLIED
set TIME_temp = TIME_CONST_hour / 2 * TIME_timezone
set TIME_temp + arg[0]
return TIME_temp
}

# THIS METHOD RETURNS THE NUMBER OF SECONDS FROM
# JANUARY 1 1970 TO JANUARY 1 ON THE YEAR SPECIFIED
{+get_seconds_for_year
set TIME_year = arg[0] - 1970
set TIME_year_sec = 0
set TIME_index = 0
while TIME_year > 0
set TIME_year_sec + TIME_CONST_year_cycle[TIME_index]
set TIME_index + 1
set TIME_year - 1
if TIME_index = 4
set TIME_index = 0
endif
endwhile
return TIME_year_sec
}

integer TIME_leap

# THIS FUNCTION GETS THE NUMBER OF SECONDS FROM THE START
# OF THE YEAR TO THE START OF THE MONTH PASSED
# NOTE: THIS FUNCTION NEEDS TO KNOW IF THIS IS A LEAP YEAR
# OR NOT, YEAR MUST BE PASSED AS ARG[1], OTHER WISE PRESUMED
# TO BE THIS YEAR
{+get_seconds_for_month
set TIME_index = 0
set TIME_month = arg[0]
set TIME_month_sec = 0
set TIME_year = arg[1]
if +is_leap_year?<TIME_year = true
while TIME_index < TIME_month
set TIME_month_sec + TIME_CONST_lenleap[TIME_index]
set TIME_index + 1
endwhile
else
while TIME_index < TIME_month
set TIME_month_sec + TIME_CONST_lengths[TIME_index]
set TIME_index + 1
endwhile
endif
# ADD THE YEAR TO THE MONTH
set TIME_year_sec = +get_seconds_for_year<TIME_year
set TIME_month_sec + TIME_year_sec
return TIME_month_sec
}

# MUST BE PASSED DATE, MONTH AND YEAR INTEGERS
# DATE AND MONTH MUST BE ZERO-BASED
{+get_seconds_for_date
set TIME_year = arg[2]
set TIME_month = arg[1]
set TIME_month_sec = +get_seconds_for_month<TIME_month<TIME_year
set TIME_date_sec = TIME_CONST_day * arg[0]
set TIME_date_sec + TIME_month_sec
return TIME_date_sec
}

{+get_seconds_for_hour
set TIME_hour_sec = TIME_CONST_hour * arg[0]
return TIME_hour_sec
}

{+get_seconds_for_minute
set TIME_minute_sec = TIME_CONST_minute * arg[0]
return TIME_minute_sec
}

{+parse_date
split TIME_index string_arg[0] "/" "TIME_chunk"
set TIME_day = TIME_chunk[0] - 1          # ZERO-BASED
set TIME_month = TIME_chunk[1] - 1        # ZERO-BASED
set TIME_year = TIME_chunk[2]
return +get_seconds_for_date<TIME_day<TIME_month<TIME_year
}
# VALIDATION library

string_array VALID_string 10
integer VALID_count

{+validate_date
#arg[0] = string to validate

split VALID_count string_arg[0] "/" VALID_string

if VALID_count != 3
return false
endif

if VALID_string[0] < 1 : VALID_string[0] > 31
return false
endif

if VALID_string[1] < 1 : VALID_string[1] > 12
return false
endif

length VALID_count VALID_string[2]

if VALID_count != 4
return false
endif

return true
}

{+validate_email
#arg[0] = string to validate

split VALID_count string_arg[0] "@" VALID_string

if VALID_count != 2
return false
endif

ifstring VALID_string[1] !contains "."
return false
endif

return true
}
# HEADERS AND FOOTERS FOR WEB-BASED APPLICATIONS

string current_image "none"

parameter "mode" WEBAPP_mode
integer WEBAPP_mode 1

integer WEBAPP_index

parameter "device" WEBAPP_device
integer WEBAPP_device	1
constant WEBAPP_desktop	1
constant WEBAPP_mobile	2

grammar change mode $integer >change_mode

{+change_mode
set WEBAPP_mode = $integer
}

grammar change device $integer >change_device

{+change_device
set WEBAPP_device = $integer
}

{+header
set linebreaks = false
print
<!DOCTYPE html>
<html dir="ltr" lang="en-US">
<head>
<meta HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
.
write "<title>" game_title "</title>"
execute "+styles"
call "+user_styles"
write "<script src=~/include/jquery-3.6.0.min.js~></script>"

ifstring favicon_image = "none"
write "<link rel=~icon~ href=~/images/favicon.ico~ type=~image/x-icon~>"
else
write "<link rel=~icon~ href=~" favicon_image "~ type=~image/x-icon~>"
endif
print
<script language=~JavaScript~>^
if (window.matchMedia("(max-width: 767px)").matches) {
.
if WEBAPP_device != WEBAPP_mobile
write "window.location.replace(~" $url "?device=2~);"
endif
print
}

if (window.matchMedia("(min-width: 767px)").matches) {
.
if WEBAPP_device != WEBAPP_desktop
write "window.location.replace(~" $url "?device=1~);"
endif
write "}"

write "function ajaxForm(details) {^"
write "var url_string = ~" $url "?ajax=true&command=~ + details.command + "~"
if remote_user = false
write "+ ~&user_id=" $user_id "~;^"
else
write ";^"
endif
print
$.ajax({
url: url_string,^
success: function (data) {^
.
ifexecute "+local_success"
# RESULT HANDLED BY LOCAL APPLICATION
else
print
# DEFAULT ACTION
if (details.replace == true) {^
console.log(details);
$(details.element).html(data);^
} else {^
console.log(details);
$(details.element).append(data);^
}^
.
endif
print
}^
});^
}^
.
write "function ajaxRequest(event) {^"
write "var url_string = ~" $url "?ajax=true&command=~ + "
write "event.data.command"
if remote_user = false
write "+ ~&user_id=" $user_id "~;^"
else
write ";^"
endif
write "$.ajax({^url: url_string,^"
write "		success: function (data) {^"
ifexecute "+local_success"
# RESULT HANDLED BY LOCAL APPLICATION
else
# DEFAULT ACTION
print
if (event.data.replace == true) {^
$(event.data.element).html(data);^
} else {^
$(event.data.element).append(data);^
}^
.
endif
print
}^
});^
}^
.

write "</script>^"
call "+local_header"
print
</head><body>^
<div id="header">
.
ifstring title_image = "none"
write "<h1 class=~title~>" game_title "</h1>"
else
if WEBAPP_device = WEBAPP_desktop
write "<img class=~titleimage~ alt=~" game_title "~ src=~" desktop_title_image "~>"
else
write "<img class=~titleimage~ alt=~" game_title "~ src=~" mobile_title_image "~>"
endif
endif
call "+header_links"
write "<div class=~linkbar~>
write "</div>^"
write "<div class=~links~>
call "+links_div"
write "</div>"
write "</div>^"
if @tab_names > 1
write "<div class=~mode~>^"
set WEBAPP_index = 1
while WEBAPP_index < @tab_names
if WEBAPP_mode = WEBAPP_index
write "<div class=~selectedtab~>" tab_names[WEBAPP_index] "</div>"
else
write "<div class=~tab~>"
write "<a class=~tablink~ href=~" $url "?"
if remote_user = false
write "user_id=" $user_id "&"
endif
write "mode=" WEBAPP_index "~>" tab_names[WEBAPP_index] "</a>"
write "</div>
endif
set WEBAPP_index + 1
endwhile
write "</div>"
endif
write "<div id=~main~>^"
set linebreaks = true
}

{+footer
write "</div>"
write "</body></html>^"
}

{+command_link
write "<a href=~" $url "?command=" string_arg[0]
if remote_user = false
write "&user_id=" $user_id
endif
write "~>"
}

integer WEBAPP_total

{+styles
print
<style>
html { height: 100%;}^
body {
top: 0px;
bottom: 0px;
max-height: 100%;
height: 100%;
margin: 0px; }^

#header {
display: block;
.
write "		height: " header_height "px;"
print
font-size: 12pt;
color: white;
font-family: Verdana, Arial, Sanserif;
.
write " background-color: " header_colour "; }^"
print
#footer {
position: absolute;
bottom: 0;
left: 0;
right: 0;
display: inline;
overflow: hidden;
font-family: Verdana, Arial, Sanserif;
height: 160px;
background-color: #40392e; }^

div.mode {
display: flex;
justify-content: flex-start;
align-items: flex-start;
.
write "	background-color: " tab_colour "; }^"
print
div.tab {
display: table-cell;
vertical-align: middle;
margin: 0px;
border-top: none;
border-bottom: none;
border-left: none;
border-right: solid;
border-width: 1px;
border-color: black;
text-align: center;
float: left;
height: 23px;
.
write "   width: " tab_width "px;"
print
font-family: Verdana, Arial, Sanserif;
font-size: 12pt;
background-color: #777777; }^

div.error {
font-family: Verdana, Arial, Sanserif;
font-size: 12pt;
float: left;
margin-left: 10px;
margin-top: 6px;
color: red; }^

div.selectedtab {
border-top: none;
border-bottom: none;
border-left: none;
border-right: solid;
border-width: 1px;
border-color: black;
margin: 0px;
text-align: center;
float: left;
height: 23px;
.
write "   width: " tab_width "px;"
print
font-family: Verdana, Arial, Sanserif;
font-color: black;
.
write "   background-color: " maintext_colour "; }^"
print
#main {
height: 100%;
font-family: Verdana, Arial, Sanserif;
display: block;
color: #333333;
padding-top: 20px;
padding-bottom: 20px;
padding-left: 20px;
padding-right: 20px;
overflow: auto;
.
if @tab_names = 1
#write "top: " header_height "px;"
else
set WEBAPP_total = header_height + 30
#write "top: " WEBAPP_total "px;"
endif
write "   background-color: " maintext_colour "; }^"
print
b.light {	font-family: Verdana, Arial, Sanserif;
color: #c0b098; font-size: 12pt}^

a.tablink {	font-family: Verdana, Arial, Sanserif;
text-decoration: none;
color: black;
font-size: 12pt}^

a.control {	font-family: Verdana, Arial, Sanserif;
text-decoration: none;
color: #333333;
font-size: 12pt}^

a.main {	font-family: Verdana, Arial, Sanserif;
color: black;
font-size: 12pt}^

a {	font-family: Verdana, Arial, Sanserif;
color: #4444bb;
font-size: 12pt}^

th { background-color: #CCCCCC;
padding: 4px 10px 4px 10px;
margin: 0px;
border: none;
border-width: 0px; }^

td { border-bottom: solid;
border-width: 2px;
border-color: #CCCCCC;
padding: 4px 10px 4px 10px;
margin: 0px; }^

h1 { font-family: Verdana, Arial, Sanserif;
color: #c0b098;
font-size: 18pt}^

h1.title { margin-left: 20px; }^

h2 {
font-family: Verdana, Arial, Sanserif;
color: #333333; font-size: 18pt;
font-weight: bold; }^

h3 {
font-family: Verdana, Arial, Sanserif;
color: #333333; font-size: 14pt; }^

input.button {
margin-top: 7px;
margin-left: 5px; }^

input.dir_button {
margin-top: 0px;
margin-left: 0px; }^

div.links {
position: relative;
top: -48px;
height: 23px;
opacity: 1.0;
padding-right: 10px;
text-align: right;
white-space: nowrap; }^

div.linkbar {
position: relative;
top: -26px;
height: 23px;
opacity: 0.7;
padding-right: 10px;
text-align: right;
white-space: nowrap;
.
write "   background-color: " linkbar_colour "; }^"
print
img.right {
padding: 15px 5px 5px 5px;
float: right; }^

img.left {
padding: 15px 15px 5px 5px;
float: left; }^

img.titleimage {
margin: 0px;
padding: 0px;
.
write "	height: " header_height "px; }^"
print
a.logo {
position: absolute;
bottom: 15px;
right: 475px;
border: none;
border-width: 0px;
margin-right: 0px;
margin-bottom: 0px;
margin-left: 0px;
margin-top: 0px; }^

div.row {
display: table-row; }^

div.label {
display: table-cell;
margin-top: 5px;
margin-bottom: 5px;
margin-right: 5px;
text-align: right;
width: 150px;
float: left; }^

div.input {
display: table-cell;
margin-top: 5px;
margin-bottom: 5px;
margin-right: 5px;
text-align: left;
float: left; }^

select {
width: 150px; }^
.
call "+local_styles"
print
</style>
.
}
