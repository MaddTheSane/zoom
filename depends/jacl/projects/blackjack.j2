#!../bin/jacl
#processed:424

#                                                                     BLACKJACL
# -----------------------------------------------------------------------------
# Copyright (C) Stuart Allen 2001. All rights resevered.
# -----------------------------------------------------------------------------

# CONSTANTS FOR RESOURCES IN BLORB FILE
constant IMAGE_blackjack 1

integer INDEX
integer COUNTER
integer NODE1
integer NODE2
integer cardA
integer cardB
integer cardC
integer CHECK_STRATEGY 0

string status_text
integer status_window 3
integer OFFSET

{+update_status_window
style reverse
padstring status_text " " status_width
write status_text
cursor 0 1
write status_text
cursor 0 2
write status_text
cursor 1 1
write "BlackJACL"
setstring status_text "Bankroll: $" score
set OFFSET = status_width
length INDEX status_text
set OFFSET - INDEX
set OFFSET - 1
cursor OFFSET 1
write status_text
style normal
}

{+set_node1
set NODE1 = shoe
set COUNTER = random
set COUNTER + 4
repeat
set NODE1 = NODE1(next)
set COUNTER - 1;
until COUNTER = 0
}

{+set_node2
set NODE2 = end
set COUNTER = random
set COUNTER + 4
repeat
set NODE2 = NODE2(previous)
set COUNTER - 1;
until COUNTER = 0
}

# Optional rules
integer SOFT_SEVENTEEN		false	; DEALER HITS ON A SOFT SEVENTEEN
integer DAS				true	; ALLOWED TO DOUBLE AFTER SPIT

location casino : casino

{look
execute "+display_table"
}

constant value			1

constant type			2

constant number_card	1
constant jack_card		2
constant queen_card		3
constant king_card		4
constant ace_card		5

constant suit			3

object hearts
short  name "hearts"

object diamonds
short  name "diamonds"

object clubs
short  name "clubs"

object spades
short  name "spades"


#	constant hearts		1
#	constant diamonds	2
#	constant clubs		3
#	constant spades		4

constant high-low		9
constant omega2			10
constant ko			11

object shoe	: shoe
next		d1_two_diamonds

object d1_two_diamonds : two of diamonds
short		a "two of diamonds"
value		2
type		number_card
suit		diamonds
next		d1_three_diamonds
previous	shoe
high-low	1
omega2	1
ko		1

object d1_three_diamonds : three of diamonds
short		a "three of diamonds"
value		3
type		number_card
suit		diamonds
next		d1_four_diamonds
previous	d1_two_diamonds
high-low	1
omega2	1
ko		1

object d1_four_diamonds : four of diamonds
short		a "four of diamonds"
value		4
type		number_card
suit		diamonds
next		d1_five_diamonds
previous	d1_three_diamonds
high-low	1
omega2	2
ko		1

object d1_five_diamonds : five of diamonds
short		a "five of diamonds"
value		5
type		number_card
suit		diamonds
next		d1_six_diamonds
previous	d1_four_diamonds
high-low	1
omega2	2
ko		1

object d1_six_diamonds : six of diamonds
short		a "six of diamonds"
value		6
type		number_card
suit		diamonds
next		d1_seven_diamonds
previous	d1_five_diamonds
high-low	1
omega2	2
ko		1

object d1_seven_diamonds : seven of diamonds
short		a "seven of diamonds"
value		7
type		number_card
suit		diamonds
next		d1_eight_diamonds
previous	d1_six_diamonds
high-low	0
omega2	1
ko		1

object d1_eight_diamonds : eight of diamonds
short		an "eight of diamonds"
value		8
type		number_card
suit		diamonds
next		d1_nine_diamonds
previous	d1_seven_diamonds
high-low	0
omega2	0
ko		0

object d1_nine_diamonds : nine of diamonds
short		a "nine of diamonds"
value		9
type		number_card
suit		diamonds
next		d1_ten_diamonds
previous	d1_eight_diamonds
high-low	0
omega2	-1
ko		0

object d1_ten_diamonds : ten of diamonds
short		a "ten of diamonds"
value		10
type		number_card
suit		diamonds
next		d1_jack_diamonds
previous	d1_nine_diamonds
high-low	-1
omega2	-2
ko		-1

object d1_jack_diamonds : jack of diamonds
short		a "jack of diamonds"
value		10
type		jack_card
suit		diamonds
next		d1_queen_diamonds
previous	d1_ten_diamonds
high-low	-1
omega2	-2
ko		-1

object d1_queen_diamonds : queen of diamonds
short		a "queen of diamonds"
value		10
type		queen_card
suit		diamonds
next		d1_king_diamonds
previous	d1_jack_diamonds
high-low	-1
omega2	-2
ko		-1

object d1_king_diamonds : king of diamonds
short		a "king of diamonds"
value		10
type		king_card
suit		diamonds
next		d1_ace_diamonds
previous	d1_queen_diamonds
high-low	-1
omega2	-2
ko		-1

object d1_ace_diamonds : ace of diamonds
short		an "ace of diamonds"
value		11
type		ace_card
suit		diamonds
next		d1_two_hearts
previous	d1_king_diamonds
high-low	-1
omega2	-0
ko		-1

object d1_two_hearts : two of hearts
short		a "two of hearts"
value		2
type		number_card
suit		hearts
next		d1_three_hearts
previous	d1_ace_diamonds
high-low	1
omega2	1
ko		1

object d1_three_hearts : three of hearts
short		a "three of hearts"
value		3
type		number_card
suit		hearts
next		d1_four_hearts
previous	d1_two_hearts
high-low	1
omega2	1
ko		1

object d1_four_hearts : four of hearts
short		a "four of hearts"
value		4
type		number_card
suit		hearts
next		d1_five_hearts
previous	d1_three_hearts
high-low	1
omega2	2
ko		1

object d1_five_hearts : five of hearts
short		a "five of hearts"
value		5
type		number_card
suit		hearts
next		d1_six_hearts
previous	d1_four_hearts
high-low	1
omega2	2
ko		1

object d1_six_hearts : six of hearts
short		a "six of hearts"
value		6
type		number_card
suit		hearts
next		d1_seven_hearts
previous	d1_five_hearts
high-low	1
omega2	2
ko		1

object d1_seven_hearts : seven of hearts
short		a "seven of hearts"
value		7
type		number_card
suit		hearts
next		d1_eight_hearts
previous	d1_six_hearts
high-low	0
omega2	1
ko		1

object d1_eight_hearts : eight of hearts
short		an "eight of hearts"
value		8
type		number_card
suit		hearts
next		d1_nine_hearts
previous	d1_seven_hearts
high-low	0
omega2	0
ko		0

object d1_nine_hearts : nine of hearts
short		a "nine of hearts"
value		9
type		number_card
suit		hearts
next		d1_ten_hearts
previous	d1_eight_hearts
high-low	0
omega2	-1
ko		0

object d1_ten_hearts : ten of hearts
short		a "ten of hearts"
value		10
type		number_card
suit		hearts
next		d1_jack_hearts
previous	d1_nine_hearts
high-low	-1
omega2	-2
ko		-1

object d1_jack_hearts : jack of hearts
short		a "jack of hearts"
value		10
type		jack_card
suit		hearts
next		d1_queen_hearts
previous	d1_ten_hearts
high-low	-1
omega2	-2
ko		-1

object d1_queen_hearts : queen of hearts
short		a "queen of hearts"
value		10
type		queen_card
suit		hearts
next		d1_king_hearts
previous	d1_jack_hearts
high-low	-1
omega2	-2
ko		-1

object d1_king_hearts : king of hearts
short		a "king of hearts"
value		10
type		king_card
suit		hearts
next		d1_ace_hearts
previous	d1_queen_hearts
high-low	-1
omega2	-2
ko		-1

object d1_ace_hearts : ace of hearts
short		an "ace of hearts"
value		11
type		ace_card
suit		hearts
next		d1_two_clubs
previous	d1_king_hearts
high-low	-1
omega2	0
ko		-1

object d1_two_clubs : two of clubs
short		a "two of clubs"
value		2
type		number_card
suit		clubs
next		d1_three_clubs
previous	d1_ace_hearts
high-low	1
omega2	1
ko		1

object d1_three_clubs : three of clubs
short		a "three of clubs"
value		3
type		number_card
suit		clubs
next		d1_four_clubs
previous	d1_two_clubs
high-low	1
omega2	1
ko		1

object d1_four_clubs : four of clubs
short		a "four of clubs"
value		4
type		number_card
suit		clubs
next		d1_five_clubs
previous	d1_three_clubs
high-low	1
omega2	2
ko		1

object d1_five_clubs : five of clubs
short		a "five of clubs"
value		5
type		number_card
suit		clubs
next		d1_six_clubs
previous	d1_four_clubs
high-low	1
omega2	2
ko		1

object d1_six_clubs : six of clubs
short		a "six of clubs"
value		6
type		number_card
suit		clubs
next		d1_seven_clubs
previous	d1_five_clubs
high-low	1
omega2	2
ko		1

object d1_seven_clubs : seven of clubs
short		a "seven of clubs"
value		7
type		number_card
suit		clubs
next		d1_eight_clubs
previous	d1_six_clubs
high-low	0
omega2	1
ko		1

object d1_eight_clubs : eight of clubs
short		an "eight of clubs"
value		8
type		number_card
suit		clubs
next		d1_nine_clubs
previous	d1_seven_clubs
high-low	0
omega2	0
ko		0

object d1_nine_clubs : nine of clubs
short		a "nine of clubs"
value		9
type		number_card
suit		clubs
next		d1_ten_clubs
previous	d1_eight_clubs
high-low	0
omega2	-1
ko		0

object d1_ten_clubs : ten of clubs
short		a "ten of clubs"
value		10
type		number_card
suit		clubs
next		d1_jack_clubs
previous	d1_nine_clubs
high-low	-1
omega2	-2
ko		-1

object d1_jack_clubs : jack of clubs
short		a "jack of clubs"
value		10
type		jack_card
suit		clubs
next		d1_queen_clubs
previous	d1_ten_clubs
high-low	-1
omega2	-2
ko		-1

object d1_queen_clubs : queen of clubs
short		a "queen of clubs"
value		10
type		queen_card
suit		clubs
next		d1_king_clubs
previous	d1_jack_clubs
high-low	-1
omega2	-2
ko		-1

object d1_king_clubs : king of clubs
short		a "king of clubs"
value		10
type		king_card
suit		clubs
next		d1_ace_clubs
previous	d1_queen_clubs
high-low	-1
omega2	-2
ko		-1

object d1_ace_clubs : ace of clubs
short		an "ace of clubs"
value		11
type		ace_card
suit		clubs
next		d1_two_spades
previous	d1_king_clubs
high-low	-1
omega2	-0
ko		-1

object d1_two_spades : two of spades
short		a "two of spades"
value		2
type		number_card
suit		spades
next		d1_three_spades
previous	d1_ace_clubs
high-low	1
omega2	1
ko		1

object d1_three_spades : three of spades
short		a "three of spades"
value		3
type		number_card
suit		spades
next		d1_four_spades
previous	d1_two_spades
high-low	1
omega2	1
ko		1

object d1_four_spades : four of spades
short		a "four of spades"
value		4
type		number_card
suit		spades
next		d1_five_spades
previous	d1_three_spades
high-low	1
omega2	2
ko		1

object d1_five_spades : five of spades
short		a "five of spades"
value		5
type		number_card
suit		spades
next		d1_six_spades
previous	d1_four_spades
high-low	1
omega2	2
ko		1

object d1_six_spades : six of spades
short		a "six of spades"
value		6
type		number_card
suit		spades
next		d1_seven_spades
previous	d1_five_spades
high-low	1
omega2	2
ko		1

object d1_seven_spades : seven of spades
short		a "seven of spades"
value		7
type		number_card
suit		spades
next		d1_eight_spades
previous	d1_six_spades
high-low	0
omega2	1
ko		1

object d1_eight_spades : eight of spades
short		an "eight of spades"
value		8
type		number_card
suit		spades
next		d1_nine_spades
previous	d1_seven_spades
high-low	0
omega2	0
ko		0

object d1_nine_spades : nine of spades
short		a "nine of spades"
value		9
type		number_card
suit		spades
next		d1_ten_spades
previous	d1_eight_spades
high-low	0
omega2	-1
ko		0

object d1_ten_spades : ten of spades
short		a "ten of spades"
value		10
type		number_card
suit		spades
next		d1_jack_spades
previous	d1_nine_spades
high-low	-1
omega2	-2
ko		-1

object d1_jack_spades : jack of spades
short		a "jack of spades"
value		10
type		jack_card
suit		spades
next		d1_queen_spades
previous	d1_ten_spades
high-low	-1
omega2	-2
ko		-1

object d1_queen_spades : queen of spades
short		a "queen of spades"
value		10
type		queen_card
suit		spades
next		d1_king_spades
previous	d1_jack_spades
high-low	-1
omega2	-2
ko		-1

object d1_king_spades : king of spades
short		a "king of spades"
value		10
type		king_card
suit		spades
next		d1_ace_spades
previous	d1_queen_spades
high-low	-1
omega2	-2
ko		-1

object d1_ace_spades : ace of spades
short		an "ace of spades"
value		11
type		ace_card
suit		spades
next		d2_two_diamonds
previous	d1_king_spades
high-low	-1
omega2	0
ko		-1

object d2_two_diamonds : two of diamonds
short		a "two of diamonds"
value		2
type		number_card
suit		diamonds
next		d2_three_diamonds
previous	d1_ace_spades
high-low	1
omega2	1
ko		1

object d2_three_diamonds : three of diamonds
short		a "three of diamonds"
value		3
type		number_card
suit		diamonds
next		d2_four_diamonds
previous	d2_two_diamonds
high-low	1
omega2	1
ko		1

object d2_four_diamonds : four of diamonds
short		a "four of diamonds"
value		4
type		number_card
suit		diamonds
next		d2_five_diamonds
previous	d2_three_diamonds
high-low	1
omega2	2
ko		1

object d2_five_diamonds : five of diamonds
short		a "five of diamonds"
value		5
type		number_card
suit		diamonds
next		d2_six_diamonds
previous	d2_four_diamonds
high-low	1
omega2	2
ko		1

object d2_six_diamonds : six of diamonds
short		a "six of diamonds"
value		6
type		number_card
suit		diamonds
next		d2_seven_diamonds
previous	d2_five_diamonds
high-low	1
omega2	2
ko		1

object d2_seven_diamonds : seven of diamonds
short		a "seven of diamonds"
value		7
type		number_card
suit		diamonds
next		d2_eight_diamonds
previous	d2_six_diamonds
high-low	0
omega2	1
ko		1

object d2_eight_diamonds : eight of diamonds
short		an "eight of diamonds"
value		8
type		number_card
suit		diamonds
next		d2_nine_diamonds
previous	d2_seven_diamonds
high-low	0
omega2	0
ko		0

object d2_nine_diamonds : nine of diamonds
short		a "nine of diamonds"
value		9
type		number_card
suit		diamonds
next		d2_ten_diamonds
previous	d2_eight_diamonds
high-low	0
omega2	-1
ko		0

object d2_ten_diamonds : ten of diamonds
short		a "ten of diamonds"
value		10
type		number_card
suit		diamonds
next		d2_jack_diamonds
previous	d2_nine_diamonds
high-low	-1
omega2	-2
ko		-1

object d2_jack_diamonds : jack of diamonds
short		a "jack of diamonds"
value		10
type		jack_card
suit		diamonds
next		d2_queen_diamonds
previous	d2_ten_diamonds
high-low	-1
omega2	-2
ko		-1

object d2_queen_diamonds : queen of diamonds
short		a "queen of diamonds"
value		10
type		queen_card
suit		diamonds
next		d2_king_diamonds
previous	d2_jack_diamonds
high-low	-1
omega2	-2
ko		-1

object d2_king_diamonds : king of diamonds
short		a "king of diamonds"
value		10
type		king_card
suit		diamonds
next		d2_ace_diamonds
previous	d2_queen_diamonds
high-low	-1
omega2	-2
ko		-1

object d2_ace_diamonds : ace of diamonds
short		an "ace of diamonds"
value		11
type		ace_card
suit		diamonds
next		d2_two_hearts
previous	d2_king_diamonds
high-low	-1
omega2	-0
ko		-1

object d2_two_hearts : two of hearts
short		a "two of hearts"
value		2
type		number_card
suit		hearts
next		d2_three_hearts
previous	d2_ace_diamonds
high-low	1
omega2	1
ko		1

object d2_three_hearts : three of hearts
short		a "three of hearts"
value		3
type		number_card
suit		hearts
next		d2_four_hearts
previous	d2_two_hearts
high-low	1
omega2	1
ko		1

object d2_four_hearts : four of hearts
short		a "four of hearts"
value		4
type		number_card
suit		hearts
next		d2_five_hearts
previous	d2_three_hearts
high-low	1
omega2	2
ko		1

object d2_five_hearts : five of hearts
short		a "five of hearts"
value		5
type		number_card
suit		hearts
next		d2_six_hearts
previous	d2_four_hearts
high-low	1
omega2	2
ko		1

object d2_six_hearts : six of hearts
short		a "six of hearts"
value		6
type		number_card
suit		hearts
next		d2_seven_hearts
previous	d2_five_hearts
high-low	1
omega2	2
ko		1

object d2_seven_hearts : seven of hearts
short		a "seven of hearts"
value		7
type		number_card
suit		hearts
next		d2_eight_hearts
previous	d2_six_hearts
high-low	0
omega2	1
ko		1

object d2_eight_hearts : eight of hearts
short		an "eight of hearts"
value		8
type		number_card
suit		hearts
next		d2_nine_hearts
previous	d2_seven_hearts
high-low	0
omega2	0
ko		0

object d2_nine_hearts : nine of hearts
short		a "nine of hearts"
value		9
type		number_card
suit		hearts
next		d2_ten_hearts
previous	d2_eight_hearts
high-low	0
omega2	-1
ko		0

object d2_ten_hearts : ten of hearts
short		a "ten of hearts"
value		10
type		number_card
suit		hearts
next		d2_jack_hearts
previous	d2_nine_hearts
high-low	-1
omega2	-2
ko		-1

object d2_jack_hearts : jack of hearts
short		a "jack of hearts"
value		10
type		jack_card
suit		hearts
next		d2_queen_hearts
previous	d2_ten_hearts
high-low	-1
omega2	-2
ko		-1

object d2_queen_hearts : queen of hearts
short		a "queen of hearts"
value		10
type		queen_card
suit		hearts
next		d2_king_hearts
previous	d2_jack_hearts
high-low	-1
omega2	-2
ko		-1

object d2_king_hearts : king of hearts
short		a "king of hearts"
value		10
type		king_card
suit		hearts
next		d2_ace_hearts
previous	d2_queen_hearts
high-low	-1
omega2	-2
ko		-1

object d2_ace_hearts : ace of hearts
short		an "ace of hearts"
value		11
type		ace_card
suit		hearts
next		d2_two_clubs
previous	d2_king_hearts
high-low	-1
omega2	0
ko		-1

object d2_two_clubs : two of clubs
short		a "two of clubs"
value		2
type		number_card
suit		clubs
next		d2_three_clubs
previous	d2_ace_hearts
high-low	1
omega2	1
ko		1

object d2_three_clubs : three of clubs
short		a "three of clubs"
value		3
type		number_card
suit		clubs
next		d2_four_clubs
previous	d2_two_clubs
high-low	1
omega2	1
ko		1

object d2_four_clubs : four of clubs
short		a "four of clubs"
value		4
type		number_card
suit		clubs
next		d2_five_clubs
previous	d2_three_clubs
high-low	1
omega2	2
ko		1

object d2_five_clubs : five of clubs
short		a "five of clubs"
value		5
type		number_card
suit		clubs
next		d2_six_clubs
previous	d2_four_clubs
high-low	1
omega2	2
ko		1

object d2_six_clubs : six of clubs
short		a "six of clubs"
value		6
type		number_card
suit		clubs
next		d2_seven_clubs
previous	d2_five_clubs
high-low	1
omega2	2
ko		1

object d2_seven_clubs : seven of clubs
short		a "seven of clubs"
value		7
type		number_card
suit		clubs
next		d2_eight_clubs
previous	d2_six_clubs
high-low	0
omega2	1
ko		1

object d2_eight_clubs : eight of clubs
short		an "eight of clubs"
value		8
type		number_card
suit		clubs
next		d2_nine_clubs
previous	d2_seven_clubs
high-low	0
omega2	0
ko		0

object d2_nine_clubs : nine of clubs
short		a "nine of clubs"
value		9
type		number_card
suit		clubs
next		d2_ten_clubs
previous	d2_eight_clubs
high-low	0
omega2	-1
ko		0

object d2_ten_clubs : ten of clubs
short		a "ten of clubs"
value		10
type		number_card
suit		clubs
next		d2_jack_clubs
previous	d2_nine_clubs
high-low	-1
omega2	-2
ko		-1

object d2_jack_clubs : jack of clubs
short		a "jack of clubs"
value		10
type		jack_card
suit		clubs
next		d2_queen_clubs
previous	d2_ten_clubs
high-low	-1
omega2	-2
ko		-1

object d2_queen_clubs : queen of clubs
short		a "queen of clubs"
value		10
type		queen_card
suit		clubs
next		d2_king_clubs
previous	d2_jack_clubs
high-low	-1
omega2	-2
ko		-1

object d2_king_clubs : king of clubs
short		a "king of clubs"
value		10
type		king_card
suit		clubs
next		d2_ace_clubs
previous	d2_queen_clubs
high-low	-1
omega2	-2
ko		-1

object d2_ace_clubs : ace of clubs
short		an "ace of clubs"
value		11
type		ace_card
suit		clubs
next		d2_two_spades
previous	d2_king_clubs
high-low	-1
omega2	-0
ko		-1

object d2_two_spades : two of spades
short		a "two of spades"
value		2
type		number_card
suit		spades
next		d2_three_spades
previous	d2_ace_clubs
high-low	1
omega2	1
ko		1

object d2_three_spades : three of spades
short		a "three of spades"
value		3
type		number_card
suit		spades
next		d2_four_spades
previous	d2_two_spades
high-low	1
omega2	1
ko		1

object d2_four_spades : four of spades
short		a "four of spades"
value		4
type		number_card
suit		spades
next		d2_five_spades
previous	d2_three_spades
high-low	1
omega2	2
ko		1

object d2_five_spades : five of spades
short		a "five of spades"
value		5
type		number_card
suit		spades
next		d2_six_spades
previous	d2_four_spades
high-low	1
omega2	2
ko		1

object d2_six_spades : six of spades
short		a "six of spades"
value		6
type		number_card
suit		spades
next		d2_seven_spades
previous	d2_five_spades
high-low	1
omega2	2
ko		1

object d2_seven_spades : seven of spades
short		a "seven of spades"
value		7
type		number_card
suit		spades
next		d2_eight_spades
previous	d2_six_spades
high-low	0
omega2	1
ko		1

object d2_eight_spades : eight of spades
short		an "eight of spades"
value		8
type		number_card
suit		spades
next		d2_nine_spades
previous	d2_seven_spades
high-low	0
omega2	0
ko		0

object d2_nine_spades : nine of spades
short		a "nine of spades"
value		9
type		number_card
suit		spades
next		d2_ten_spades
previous	d2_eight_spades
high-low	0
omega2	-1
ko		0

object d2_ten_spades : ten of spades
short		a "ten of spades"
value		10
type		number_card
suit		spades
next		d2_jack_spades
previous	d2_nine_spades
high-low	-1
omega2	-2
ko		-1

object d2_jack_spades : jack of spades
short		a "jack of spades"
value		10
type		jack_card
suit		spades
next		d2_queen_spades
previous	d2_ten_spades
high-low	-1
omega2	-2
ko		-1

object d2_queen_spades : queen of spades
short		a "queen of spades"
value		10
type		queen_card
suit		spades
next		d2_king_spades
previous	d2_jack_spades
high-low	-1
omega2	-2
ko		-1

object d2_king_spades : king of spades
short		a "king of spades"
value		10
type		king_card
suit		spades
next		d2_ace_spades
previous	d2_queen_spades
high-low	-1
omega2	-2
ko		-1

object d2_ace_spades : ace of spades
short		an "ace of spades"
value		11
type		ace_card
suit		spades
next		d3_two_diamonds
previous	d2_king_spades
high-low	-1
omega2	0
ko		-1

object d3_two_diamonds : two of diamonds
short		a "two of diamonds"
value		2
type		number_card
suit		diamonds
next		d3_three_diamonds
previous	d2_ace_spades
high-low	1
omega2	1
ko		1

object d3_three_diamonds : three of diamonds
short		a "three of diamonds"
value		3
type		number_card
suit		diamonds
next		d3_four_diamonds
previous	d3_two_diamonds
high-low	1
omega2	1
ko		1

object d3_four_diamonds : four of diamonds
short		a "four of diamonds"
value		4
type		number_card
suit		diamonds
next		d3_five_diamonds
previous	d3_three_diamonds
high-low	1
omega2	2
ko		1

object d3_five_diamonds : five of diamonds
short		a "five of diamonds"
value		5
type		number_card
suit		diamonds
next		d3_six_diamonds
previous	d3_four_diamonds
high-low	1
omega2	2
ko		1

object d3_six_diamonds : six of diamonds
short		a "six of diamonds"
value		6
type		number_card
suit		diamonds
next		d3_seven_diamonds
previous	d3_five_diamonds
high-low	1
omega2	2
ko		1

object d3_seven_diamonds : seven of diamonds
short		a "seven of diamonds"
value		7
type		number_card
suit		diamonds
next		d3_eight_diamonds
previous	d3_six_diamonds
high-low	0
omega2	1
ko		1

object d3_eight_diamonds : eight of diamonds
short		an "eight of diamonds"
value		8
type		number_card
suit		diamonds
next		d3_nine_diamonds
previous	d3_seven_diamonds
high-low	0
omega2	0
ko		0

object d3_nine_diamonds : nine of diamonds
short		a "nine of diamonds"
value		9
type		number_card
suit		diamonds
next		d3_ten_diamonds
previous	d3_eight_diamonds
high-low	0
omega2	-1
ko		0

object d3_ten_diamonds : ten of diamonds
short		a "ten of diamonds"
value		10
type		number_card
suit		diamonds
next		d3_jack_diamonds
previous	d3_nine_diamonds
high-low	-1
omega2	-2
ko		-1

object d3_jack_diamonds : jack of diamonds
short		a "jack of diamonds"
value		10
type		jack_card
suit		diamonds
next		d3_queen_diamonds
previous	d3_ten_diamonds
high-low	-1
omega2	-2
ko		-1

object d3_queen_diamonds : queen of diamonds
short		a "queen of diamonds"
value		10
type		queen_card
suit		diamonds
next		d3_king_diamonds
previous	d3_jack_diamonds
high-low	-1
omega2	-2
ko		-1

object d3_king_diamonds : king of diamonds
short		a "king of diamonds"
value		10
type		king_card
suit		diamonds
next		d3_ace_diamonds
previous	d3_queen_diamonds
high-low	-1
omega2	-2
ko		-1

object d3_ace_diamonds : ace of diamonds
short		an "ace of diamonds"
value		11
type		ace_card
suit		diamonds
next		d3_two_hearts
previous	d3_king_diamonds
high-low	-1
omega2	-0
ko		-1

object d3_two_hearts : two of hearts
short		a "two of hearts"
value		2
type		number_card
suit		hearts
next		d3_three_hearts
previous	d3_ace_diamonds
high-low	1
omega2	1
ko		1

object d3_three_hearts : three of hearts
short		a "three of hearts"
value		3
type		number_card
suit		hearts
next		d3_four_hearts
previous	d3_two_hearts
high-low	1
omega2	1
ko		1

object d3_four_hearts : four of hearts
short		a "four of hearts"
value		4
type		number_card
suit		hearts
next		d3_five_hearts
previous	d3_three_hearts
high-low	1
omega2	2
ko		1

object d3_five_hearts : five of hearts
short		a "five of hearts"
value		5
type		number_card
suit		hearts
next		d3_six_hearts
previous	d3_four_hearts
high-low	1
omega2	2
ko		1

object d3_six_hearts : six of hearts
short		a "six of hearts"
value		6
type		number_card
suit		hearts
next		d3_seven_hearts
previous	d3_five_hearts
high-low	1
omega2	2
ko		1

object d3_seven_hearts : seven of hearts
short		a "seven of hearts"
value		7
type		number_card
suit		hearts
next		d3_eight_hearts
previous	d3_six_hearts
high-low	0
omega2	1
ko		1

object d3_eight_hearts : eight of hearts
short		an "eight of hearts"
value		8
type		number_card
suit		hearts
next		d3_nine_hearts
previous	d3_seven_hearts
high-low	0
omega2	0
ko		0

object d3_nine_hearts : nine of hearts
short		a "nine of hearts"
value		9
type		number_card
suit		hearts
next		d3_ten_hearts
previous	d3_eight_hearts
high-low	0
omega2	-1
ko		0

object d3_ten_hearts : ten of hearts
short		a "ten of hearts"
value		10
type		number_card
suit		hearts
next		d3_jack_hearts
previous	d3_nine_hearts
high-low	-1
omega2	-2
ko		-1

object d3_jack_hearts : jack of hearts
short		a "jack of hearts"
value		10
type		jack_card
suit		hearts
next		d3_queen_hearts
previous	d3_ten_hearts
high-low	-1
omega2	-2
ko		-1

object d3_queen_hearts : queen of hearts
short		a "queen of hearts"
value		10
type		queen_card
suit		hearts
next		d3_king_hearts
previous	d3_jack_hearts
high-low	-1
omega2	-2
ko		-1

object d3_king_hearts : king of hearts
short		a "king of hearts"
value		10
type		king_card
suit		hearts
next		d3_ace_hearts
previous	d3_queen_hearts
high-low	-1
omega2	-2
ko		-1

object d3_ace_hearts : ace of hearts
short		an "ace of hearts"
value		11
type		ace_card
suit		hearts
next		d3_two_clubs
previous	d3_king_hearts
high-low	-1
omega2	0
ko		-1

object d3_two_clubs : two of clubs
short		a "two of clubs"
value		2
type		number_card
suit		clubs
next		d3_three_clubs
previous	d3_ace_hearts
high-low	1
omega2	1
ko		1

object d3_three_clubs : three of clubs
short		a "three of clubs"
value		3
type		number_card
suit		clubs
next		d3_four_clubs
previous	d3_two_clubs
high-low	1
omega2	1
ko		1

object d3_four_clubs : four of clubs
short		a "four of clubs"
value		4
type		number_card
suit		clubs
next		d3_five_clubs
previous	d3_three_clubs
high-low	1
omega2	2
ko		1

object d3_five_clubs : five of clubs
short		a "five of clubs"
value		5
type		number_card
suit		clubs
next		d3_six_clubs
previous	d3_four_clubs
high-low	1
omega2	2
ko		1

object d3_six_clubs : six of clubs
short		a "six of clubs"
value		6
type		number_card
suit		clubs
next		d3_seven_clubs
previous	d3_five_clubs
high-low	1
omega2	2
ko		1

object d3_seven_clubs : seven of clubs
short		a "seven of clubs"
value		7
type		number_card
suit		clubs
next		d3_eight_clubs
previous	d3_six_clubs
high-low	0
omega2	1
ko		1

object d3_eight_clubs : eight of clubs
short		an "eight of clubs"
value		8
type		number_card
suit		clubs
next		d3_nine_clubs
previous	d3_seven_clubs
high-low	0
omega2	0
ko		0

object d3_nine_clubs : nine of clubs
short		a "nine of clubs"
value		9
type		number_card
suit		clubs
next		d3_ten_clubs
previous	d3_eight_clubs
high-low	0
omega2	-1
ko		0

object d3_ten_clubs : ten of clubs
short		a "ten of clubs"
value		10
type		number_card
suit		clubs
next		d3_jack_clubs
previous	d3_nine_clubs
high-low	-1
omega2	-2
ko		-1

object d3_jack_clubs : jack of clubs
short		a "jack of clubs"
value		10
type		jack_card
suit		clubs
next		d3_queen_clubs
previous	d3_ten_clubs
high-low	-1
omega2	-2
ko		-1

object d3_queen_clubs : queen of clubs
short		a "queen of clubs"
value		10
type		queen_card
suit		clubs
next		d3_king_clubs
previous	d3_jack_clubs
high-low	-1
omega2	-2
ko		-1

object d3_king_clubs : king of clubs
short		a "king of clubs"
value		10
type		king_card
suit		clubs
next		d3_ace_clubs
previous	d3_queen_clubs
high-low	-1
omega2	-2
ko		-1

object d3_ace_clubs : ace of clubs
short		an "ace of clubs"
value		11
type		ace_card
suit		clubs
next		d3_two_spades
previous	d3_king_clubs
high-low	-1
omega2	-0
ko		-1

object d3_two_spades : two of spades
short		a "two of spades"
value		2
type		number_card
suit		spades
next		d3_three_spades
previous	d3_ace_clubs
high-low	1
omega2	1
ko		1

object d3_three_spades : three of spades
short		a "three of spades"
value		3
type		number_card
suit		spades
next		d3_four_spades
previous	d3_two_spades
high-low	1
omega2	1
ko		1

object d3_four_spades : four of spades
short		a "four of spades"
value		4
type		number_card
suit		spades
next		d3_five_spades
previous	d3_three_spades
high-low	1
omega2	2
ko		1

object d3_five_spades : five of spades
short		a "five of spades"
value		5
type		number_card
suit		spades
next		d3_six_spades
previous	d3_four_spades
high-low	1
omega2	2
ko		1

object d3_six_spades : six of spades
short		a "six of spades"
value		6
type		number_card
suit		spades
next		d3_seven_spades
previous	d3_five_spades
high-low	1
omega2	2
ko		1

object d3_seven_spades : seven of spades
short		a "seven of spades"
value		7
type		number_card
suit		spades
next		d3_eight_spades
previous	d3_six_spades
high-low	0
omega2	1
ko		1

object d3_eight_spades : eight of spades
short		an "eight of spades"
value		8
type		number_card
suit		spades
next		d3_nine_spades
previous	d3_seven_spades
high-low	0
omega2	0
ko		0

object d3_nine_spades : nine of spades
short		a "nine of spades"
value		9
type		number_card
suit		spades
next		d3_ten_spades
previous	d3_eight_spades
high-low	0
omega2	-1
ko		0

object d3_ten_spades : ten of spades
short		a "ten of spades"
value		10
type		number_card
suit		spades
next		d3_jack_spades
previous	d3_nine_spades
high-low	-1
omega2	-2
ko		-1

object d3_jack_spades : jack of spades
short		a "jack of spades"
value		10
type		jack_card
suit		spades
next		d3_queen_spades
previous	d3_ten_spades
high-low	-1
omega2	-2
ko		-1

object d3_queen_spades : queen of spades
short		a "queen of spades"
value		10
type		queen_card
suit		spades
next		d3_king_spades
previous	d3_jack_spades
high-low	-1
omega2	-2
ko		-1

object d3_king_spades : king of spades
short		a "king of spades"
value		10
type		king_card
suit		spades
next		d3_ace_spades
previous	d3_queen_spades
high-low	-1
omega2	-2
ko		-1

object d3_ace_spades : ace of spades
short		an "ace of spades"
value		11
type		ace_card
suit		spades
next		d4_two_diamonds
previous	d3_king_spades
high-low	-1
omega2	0
ko		-1

object d4_two_diamonds : two of diamonds
short		a "two of diamonds"
value		2
type		number_card
suit		diamonds
next		d4_three_diamonds
previous	d3_ace_spades
high-low	1
omega2	1
ko		1

object d4_three_diamonds : three of diamonds
short		a "three of diamonds"
value		3
type		number_card
suit		diamonds
next		d4_four_diamonds
previous	d4_two_diamonds
high-low	1
omega2	1
ko		1

object d4_four_diamonds : four of diamonds
short		a "four of diamonds"
value		4
type		number_card
suit		diamonds
next		d4_five_diamonds
previous	d4_three_diamonds
high-low	1
omega2	2
ko		1

object d4_five_diamonds : five of diamonds
short		a "five of diamonds"
value		5
type		number_card
suit		diamonds
next		d4_six_diamonds
previous	d4_four_diamonds
high-low	1
omega2	2
ko		1

object d4_six_diamonds : six of diamonds
short		a "six of diamonds"
value		6
type		number_card
suit		diamonds
next		d4_seven_diamonds
previous	d4_five_diamonds
high-low	1
omega2	2
ko		1

object d4_seven_diamonds : seven of diamonds
short		a "seven of diamonds"
value		7
type		number_card
suit		diamonds
next		d4_eight_diamonds
previous	d4_six_diamonds
high-low	0
omega2	1
ko		1

object d4_eight_diamonds : eight of diamonds
short		an "eight of diamonds"
value		8
type		number_card
suit		diamonds
next		d4_nine_diamonds
previous	d4_seven_diamonds
high-low	0
omega2	0
ko		0

object d4_nine_diamonds : nine of diamonds
short		a "nine of diamonds"
value		9
type		number_card
suit		diamonds
next		d4_ten_diamonds
previous	d4_eight_diamonds
high-low	0
omega2	-1
ko		0

object d4_ten_diamonds : ten of diamonds
short		a "ten of diamonds"
value		10
type		number_card
suit		diamonds
next		d4_jack_diamonds
previous	d4_nine_diamonds
high-low	-1
omega2	-2
ko		-1

object d4_jack_diamonds : jack of diamonds
short		a "jack of diamonds"
value		10
type		jack_card
suit		diamonds
next		d4_queen_diamonds
previous	d4_ten_diamonds
high-low	-1
omega2	-2
ko		-1

object d4_queen_diamonds : queen of diamonds
short		a "queen of diamonds"
value		10
type		queen_card
suit		diamonds
next		d4_king_diamonds
previous	d4_jack_diamonds
high-low	-1
omega2	-2
ko		-1

object d4_king_diamonds : king of diamonds
short		a "king of diamonds"
value		10
type		king_card
suit		diamonds
next		d4_ace_diamonds
previous	d4_queen_diamonds
high-low	-1
omega2	-2
ko		-1

object d4_ace_diamonds : ace of diamonds
short		an "ace of diamonds"
value		11
type		ace_card
suit		diamonds
next		d4_two_hearts
previous	d4_king_diamonds
high-low	-1
omega2	-0
ko		-1

object d4_two_hearts : two of hearts
short		a "two of hearts"
value		2
type		number_card
suit		hearts
next		d4_three_hearts
previous	d4_ace_diamonds
high-low	1
omega2	1
ko		1

object d4_three_hearts : three of hearts
short		a "three of hearts"
value		3
type		number_card
suit		hearts
next		d4_four_hearts
previous	d4_two_hearts
high-low	1
omega2	1
ko		1

object d4_four_hearts : four of hearts
short		a "four of hearts"
value		4
type		number_card
suit		hearts
next		d4_five_hearts
previous	d4_three_hearts
high-low	1
omega2	2
ko		1

object d4_five_hearts : five of hearts
short		a "five of hearts"
value		5
type		number_card
suit		hearts
next		d4_six_hearts
previous	d4_four_hearts
high-low	1
omega2	2
ko		1

object d4_six_hearts : six of hearts
short		a "six of hearts"
value		6
type		number_card
suit		hearts
next		d4_seven_hearts
previous	d4_five_hearts
high-low	1
omega2	2
ko		1

object d4_seven_hearts : seven of hearts
short		a "seven of hearts"
value		7
type		number_card
suit		hearts
next		d4_eight_hearts
previous	d4_six_hearts
high-low	0
omega2	1
ko		1

object d4_eight_hearts : eight of hearts
short		an "eight of hearts"
value		8
type		number_card
suit		hearts
next		d4_nine_hearts
previous	d4_seven_hearts
high-low	0
omega2	0
ko		0

object d4_nine_hearts : nine of hearts
short		a "nine of hearts"
value		9
type		number_card
suit		hearts
next		d4_ten_hearts
previous	d4_eight_hearts
high-low	0
omega2	-1
ko		0

object d4_ten_hearts : ten of hearts
short		a "ten of hearts"
value		10
type		number_card
suit		hearts
next		d4_jack_hearts
previous	d4_nine_hearts
high-low	-1
omega2	-2
ko		-1

object d4_jack_hearts : jack of hearts
short		a "jack of hearts"
value		10
type		jack_card
suit		hearts
next		d4_queen_hearts
previous	d4_ten_hearts
high-low	-1
omega2	-2
ko		-1

object d4_queen_hearts : queen of hearts
short		a "queen of hearts"
value		10
type		queen_card
suit		hearts
next		d4_king_hearts
previous	d4_jack_hearts
high-low	-1
omega2	-2
ko		-1

object d4_king_hearts : king of hearts
short		a "king of hearts"
value		10
type		king_card
suit		hearts
next		d4_ace_hearts
previous	d4_queen_hearts
high-low	-1
omega2	-2
ko		-1

object d4_ace_hearts : ace of hearts
short		an "ace of hearts"
value		11
type		ace_card
suit		hearts
next		d4_two_clubs
previous	d4_king_hearts
high-low	-1
omega2	0
ko		-1

object d4_two_clubs : two of clubs
short		a "two of clubs"
value		2
type		number_card
suit		clubs
next		d4_three_clubs
previous	d4_ace_hearts
high-low	1
omega2	1
ko		1

object d4_three_clubs : three of clubs
short		a "three of clubs"
value		3
type		number_card
suit		clubs
next		d4_four_clubs
previous	d4_two_clubs
high-low	1
omega2	1
ko		1

object d4_four_clubs : four of clubs
short		a "four of clubs"
value		4
type		number_card
suit		clubs
next		d4_five_clubs
previous	d4_three_clubs
high-low	1
omega2	2
ko		1

object d4_five_clubs : five of clubs
short		a "five of clubs"
value		5
type		number_card
suit		clubs
next		d4_six_clubs
previous	d4_four_clubs
high-low	1
omega2	2
ko		1

object d4_six_clubs : six of clubs
short		a "six of clubs"
value		6
type		number_card
suit		clubs
next		d4_seven_clubs
previous	d4_five_clubs
high-low	1
omega2	2
ko		1

object d4_seven_clubs : seven of clubs
short		a "seven of clubs"
value		7
type		number_card
suit		clubs
next		d4_eight_clubs
previous	d4_six_clubs
high-low	0
omega2	1
ko		1

object d4_eight_clubs : eight of clubs
short		an "eight of clubs"
value		8
type		number_card
suit		clubs
next		d4_nine_clubs
previous	d4_seven_clubs
high-low	0
omega2	0
ko		0

object d4_nine_clubs : nine of clubs
short		a "nine of clubs"
value		9
type		number_card
suit		clubs
next		d4_ten_clubs
previous	d4_eight_clubs
high-low	0
omega2	-1
ko		0

object d4_ten_clubs : ten of clubs
short		a "ten of clubs"
value		10
type		number_card
suit		clubs
next		d4_jack_clubs
previous	d4_nine_clubs
high-low	-1
omega2	-2
ko		-1

object d4_jack_clubs : jack of clubs
short		a "jack of clubs"
value		10
type		jack_card
suit		clubs
next		d4_queen_clubs
previous	d4_ten_clubs
high-low	-1
omega2	-2
ko		-1

object d4_queen_clubs : queen of clubs
short		a "queen of clubs"
value		10
type		queen_card
suit		clubs
next		d4_king_clubs
previous	d4_jack_clubs
high-low	-1
omega2	-2
ko		-1

object d4_king_clubs : king of clubs
short		a "king of clubs"
value		10
type		king_card
suit		clubs
next		d4_ace_clubs
previous	d4_queen_clubs
high-low	-1
omega2	-2
ko		-1

object d4_ace_clubs : ace of clubs
short		an "ace of clubs"
value		11
type		ace_card
suit		clubs
next		d4_two_spades
previous	d4_king_clubs
high-low	-1
omega2	-0
ko		-1

object d4_two_spades : two of spades
short		a "two of spades"
value		2
type		number_card
suit		spades
next		d4_three_spades
previous	d4_ace_clubs
high-low	1
omega2	1
ko		1

object d4_three_spades : three of spades
short		a "three of spades"
value		3
type		number_card
suit		spades
next		d4_four_spades
previous	d4_two_spades
high-low	1
omega2	1
ko		1

object d4_four_spades : four of spades
short		a "four of spades"
value		4
type		number_card
suit		spades
next		d4_five_spades
previous	d4_three_spades
high-low	1
omega2	2
ko		1

object d4_five_spades : five of spades
short		a "five of spades"
value		5
type		number_card
suit		spades
next		d4_six_spades
previous	d4_four_spades
high-low	1
omega2	2
ko		1

object d4_six_spades : six of spades
short		a "six of spades"
value		6
type		number_card
suit		spades
next		d4_seven_spades
previous	d4_five_spades
high-low	1
omega2	2
ko		1

object d4_seven_spades : seven of spades
short		a "seven of spades"
value		7
type		number_card
suit		spades
next		d4_eight_spades
previous	d4_six_spades
high-low	0
omega2	1
ko		1

object d4_eight_spades : eight of spades
short		an "eight of spades"
value		8
type		number_card
suit		spades
next		d4_nine_spades
previous	d4_seven_spades
high-low	0
omega2	0
ko		0

object d4_nine_spades : nine of spades
short		a "nine of spades"
value		9
type		number_card
suit		spades
next		d4_ten_spades
previous	d4_eight_spades
high-low	0
omega2	-1
ko		0

object d4_ten_spades : ten of spades
short		a "ten of spades"
value		10
type		number_card
suit		spades
next		d4_jack_spades
previous	d4_nine_spades
high-low	-1
omega2	-2
ko		-1

object d4_jack_spades : jack of spades
short		a "jack of spades"
value		10
type		jack_card
suit		spades
next		d4_queen_spades
previous	d4_ten_spades
high-low	-1
omega2	-2
ko		-1

object d4_queen_spades : queen of spades
short		a "queen of spades"
value		10
type		queen_card
suit		spades
next		d4_king_spades
previous	d4_jack_spades
high-low	-1
omega2	-2
ko		-1

object d4_king_spades : king of spades
short		a "king of spades"
value		10
type		king_card
suit		spades
next		d4_ace_spades
previous	d4_queen_spades
high-low	-1
omega2	-2
ko		-1

object d4_ace_spades : ace of spades
short		an "ace of spades"
value		11
type		ace_card
suit		spades
next		end
previous	d4_king_spades
high-low	-1
omega2	0
ko		-1

object end : end
previous  d4_ace_spades


integer best_move
integer last_move

constant hit			0
string   MOVE_TYPE		hit
constant split			1
string   MOVE_TYPE		split
constant stay			2
string   MOVE_TYPE		stayed
constant double			3
string   MOVE_TYPE		doubled

integer current_hand

constant bet			1
constant result			2
constant total			3
constant aces			4
constant aces_as_one	5
constant cards			6

integer current_player

constant money			1
constant hands			2
constant insurance		3

integer PREVIOUS_GAME_PHASE
integer GAME_PHASE

constant place_bet		1
constant players_turn	2
constant dealers_turn	3

grammar coach on >coach_on

{+coach_on
set CHECK_STRATEGY = 1
write "Basic strategy coach on.^^"
if GAME_PHASE != place_bet
execute "+display_table"
endif
}

grammar coach off >coach_off

{+coach_off
set CHECK_STRATEGY = 0
write "Basic strategy coach off.^^"
if GAME_PHASE != place_bet
execute "+display_table"
endif
}

grammar blankjacl	>view_table
grammar look		>view_table

{+view_table
execute "+display_table"
}

grammar help			>help
grammar instructions	>help

{+help
write "The aim of Blackjack is to have a hand with a total value closer"
write "to 21 than the dealer without going over 21. Ten, Jack, Queen and King"
write "are all worth 10, an Ace is worth 11 or 1, and all other cards are worth"
write "their face value. An Ace is treated as 11 unless it would put your "
write "hand over 21, in which case it is treated as 1.^^"
write "There are two phases to the game of Blackjack. Firstly your must "
write "place your bet, then you must playout the hand you are dealt. "
write "When you are playing your hand, the commands available to you will be "
write "displayed based on the current game situation. Unless you hand has "
write "bust (gone over a total value of 21), you will always be able to 'hit' "
write "(receive another card) or 'stay', (finish playing that hand).^^"
write "If the dealers first card is an ace, you will be given the option to "
write "take insurance against the dealer getting blackjack by typing the "
write "command 'insurance'. This must be done before any other action "
write "regarding your hand is taken.^^"
write "If your two cards are of equal value, you will also be given the "
write "opportunity to split your hand. This takes your two initial cards "
write "and makes two one-card hands from them. This is done using the 'split' "
write "command. These two hands are then played out one at a time as normal. "
write "Be sure to pay attention to the indicator at the bottom of the screen "
write "telling you which card you are currently playing.^^"
write "If the first two card of any hand total 9, 10 or 11, you will be "
write "given the opportunity to 'double'. In this case your initial bet will "
write "be doubled and you will receive one more card only.^^"
}

grammar about >about

{+about
write "BlackJACL^"
write "Copyright (c) 2001-2007 Stuart Allen^^"
write "This program is free software; you can redistribute it and/or "
write "modify it under the terms of the GNU General Public License "
write "as published by the Free Software Foundation; either version 2 "
write "of the License, or (at your option) any later version.^"
write "This program is distributed in the hope that it will be useful, "
write "but WITHOUT ANY WARRANTY; without even the implied warranty of "
write "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the "
write "GNU General Public License for more details.^^"
write "You should have received a copy of the GNU General Public License "
write "along with this program; if not, write to the Free Software "
write "Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, "
write "USA.^"
}

grammar insurance	>insurance

{+insurance
if GAME_PHASE = place_bet
execute "+display_table"
return
endif
set INDEX = current_hand(bet)
set INDEX / 2
set current_player(insurance) = INDEX
set current_player(money) - INDEX
execute "+display_table"
}

grammar double	>double

{+double
if GAME_PHASE = place_bet
execute "+display_table"
return
endif
set current_player(money) - current_hand(bet)
set current_hand(bet) * 2
execute "+basic_strategy_code"
set last_move = double
execute "+deal_card<current_hand"
if current_player(hands) = 1
execute "+play_out_dealer"
return
endif
if current_hand = hand_one
set current_hand = hand_two
execute "+display_table"
else
execute "+play_out_dealer"
endif
}

grammar hit	>hit

{+hit
if GAME_PHASE = place_bet
execute "+display_table"
return
endif
execute "+basic_strategy_code"
set last_move = hit
execute "+deal_card<current_hand"
if current_hand(total) > 20
if current_player(hands) = 1
if current_hand(total) = 21
execute "+play_out_dealer"
else
execute "+hand_finished"
endif
return
endif
if current_hand = hand_one
set current_hand = hand_two
else
if current_hand(total) = 21 : hand_one(total) < 22
execute "+play_out_dealer"
else
execute "+hand_finished"
endif
return
endif
endif
execute "+display_table"
}

grammar stay	>stay

{+stay
if GAME_PHASE = place_bet
execute "+display_table"
return
endif
execute "+basic_strategy_code"
set last_move = stay
if current_player(hands) = 1
execute "+play_out_dealer"
return
endif
if current_hand = hand_one
set current_hand = hand_two
execute "+display_table"
else
execute "+play_out_dealer"
endif
}

grammar split	>split

{+split
if GAME_PHASE = place_bet
execute "+display_table"
return
endif
execute "+basic_strategy_code"
set last_move = split
set hand_two(bet) = hand_one(bet)
set current_player(money) - hand_two(bet)
set current_player(hands) = 2
set hand_one(aces_as_one) = 0
set hand_one(cards) = 1
set hand_two(aces_as_one) = 0
set hand_two(cards) = 1
set FIRST = false
set INDEX = FIRST_CARD
repeat
if INDEX(parent) = current_hand
if FIRST = false
set FIRST = INDEX
else
set SECOND = INDEX
endif
endif
set INDEX = INDEX(next)
until INDEX = PAST_LAST
set SECOND(parent) = hand_two
if SECOND(value) = 11
set hand_two(aces) = 1
set hand_one(aces) - 1
if FIRST(value) = 11
; Splitting aces...
set hand_one(total) = 11
set hand_two(total) = 11
execute "+deal_card<hand_one"
execute "+deal_card<hand_two"
set current_hand = hand_two
execute "+play_out_dealer"
return
endif
endif
set hand_one(total) - SECOND(value)
set hand_two(total) + SECOND(value)
execute "+display_table"
}

integer FIRST_CARD			;The first card of this hand
integer PAST_LAST			;The last card of this hand
integer NEAR_END			;The card twenty five cards from the end
integer PASSED_NEAR_END	;The twenty fifth card from the end been reached

{+shuffle_decks
; Shuffle INDEX number of times
set HIGH-LOW-COUNT = 0
set KO-COUNT = 0
set OMEGA2-COUNT = 0
set INDEX = 300
repeat
execute +set_node1
execute +set_node2
set cardA = shoe(next)
set cardB = NODE1(previous)
set cardC = NODE2(next)
set shoe(next) = NODE1
set NODE1(previous) = shoe
set cardB(next) = cardC
set cardC(previous) = cardB
set cardA(previous) = NODE2
set NODE2(next) = cardA
set INDEX - 1
until INDEX = 0
set CURRENT_CARD = shoe
execute +set_near_end
set PASSED_NEAR_END = false
}

{+set_near_end
set NEAR_END = end
set INDEX = 0
repeat
set NEAR_END = NEAR_END(previous)
set INDEX + 1
until INDEX = 25
}

{+display_card_console
if noun4(type) = number_card
if noun4(value) = 10
write " | T |"
else
write " | " noun4(value) " |"
endif
else
if noun4(type) = jack_card
write " | J |"
endif
if noun4(type) = queen_card
write " | Q |"
endif
if noun4(type) = king_card
write " | K |"
endif
if noun4(type) = ace_card
write " | A |"
endif
endif
}

integer CURRENT_CARD

integer HIGH-LOW-COUNT
integer KO-COUNT
integer OMEGA2-COUNT

{+deal_card
set CURRENT_CARD = CURRENT_CARD(next)
set PAST_LAST = CURRENT_CARD(next)
set CURRENT_CARD(parent) = noun4
execute "+increase_total<arg[0]"
set HIGH-LOW-COUNT + CURRENT_CARD(high-low)
set KO-COUNT + CURRENT_CARD(ko)
set OMEGA2-COUNT + CURRENT_CARD(omega2)
if CURRENT_CARD = NEAR_END
set PASSED_NEAR_END = true
endif
}

{+increase_total
set noun4(total) + CURRENT_CARD(value)
set noun4(cards) + 1
if CURRENT_CARD(value) = 11
set noun4(aces) + 1
endif
if noun4(total) < 22
return
endif
if noun4(aces) > noun4(aces_as_one)
set noun4(total) - 10
set noun4(aces_as_one) + 1
endif
}

integer FIRST
integer SECOND

{+is_pair
set FIRST = 0
set INDEX = FIRST_CARD
repeat
if INDEX(parent) = current_hand
if FIRST = 0
set FIRST = INDEX(value)
else
set SECOND = INDEX(value)
return
endif
endif
set INDEX = INDEX(next)
until INDEX = PAST_LAST
}

{+intro
set max_rand = end
set max_rand - d1_two_diamonds
set max_rand / 2
set max_rand - 8

image IMAGE_blackjack
execute "+shuffle_decks"

# Set the number of hands for the player back to one (dealer can only have one)
set current_player = kryten
set current_player(hands) = 1
set current_hand = hand_one
set GAME_PHASE = place_bet
set PREVIOUS_GAME_PHASE = place_bet

style header
write "^^BlackJACL^^"
style normal
write "Blackjack pays 3:2^"
write "Dealer must draw to 16 and stay on all 17s.^"
write "Double allowed after split, two decks in shoe.^"
write "Insurance pays 2 to 1^^"
write "Select your initial bet to start playing.^"
}

{+play_out_dealer
if SOFT_SEVENTEEN = true
execute "+soft"
else
execute "+hard"
endif
execute "+hand_finished"
}

{+hand_finished
execute "+determine_winner<hand_one
if current_player(hands) = 2
execute "+determine_winner<hand_two"
endif
execute "+display_final"
if PASSED_NEAR_END = true
write ""
write "---[ ALL CARDS ARE ABOUT TO BE SHUFFLED AND RETURNED TO THE SHOE ]---"
write ""
endif
set GAME_PHASE = place_bet
}

{+soft
if dealers_hand(total) < 18
if dealers_hand(total) = 17
if dealers_hand(aces) = dealers_hand(aces_as_one)
return
endif
endif
execute "+deal_card<dealers_hand"
execute "+soft"
endif
}

{+hard
if dealers_hand(total) < 17
repeat
execute "+deal_card<dealers_hand"
until dealers_hand(total) > 16
endif
}

integer RESULT

{+determine_winner
; Player bust...
if noun4(total) > 21
set noun4(result) = 1
return
endif

; Player got Blackjack...
if noun4(total) = 21
if noun4(cards) = 2
if current_player(hands) = 1
if dealers_hand(total) = 21
if dealers_hand(cards) = 2
; ...and so did the dealer...
set current_player(money) + noun4(bet)
; Pay two to one on insurance
set current_player(money) + current_player(insurance)
set current_player(money) + current_player(insurance)
set noun4(result) = 2
return
endif
endif
set INDEX = noun4(bet)
set INDEX / 2
set COUNTER = noun4(bet)
set COUNTER * 2
set COUNTER + INDEX
set current_player(money) + COUNTER
set noun4(result) = 3
return
endif
endif
endif

; The dealer got Blackjack
if dealers_hand(total) = 21
if dealers_hand(cards) = 2
set noun4(result) = 4
; Pay two to one on insurance
set current_player(money) + current_player(insurance)
set current_player(money) + current_player(insurance)
return
endif
endif

; Player equal with dealer...
if noun4(total) = dealers_hand(total)
set current_player(money) + noun4(bet)
set noun4(result) = 2
return
endif

; Dealer bust...
if dealers_hand(total) > 21
set current_player(money) + noun4(bet)
set current_player(money) + noun4(bet)
set noun4(result) = 5
return
endif

; Player higher than delear...
if noun4(total) > dealers_hand(total)
set current_player(money) + noun4(bet)
set current_player(money) + noun4(bet)
set noun4(result) = 6
return
endif

; Player not bust, dealer not bust, player lower than dealer...
set noun4(result) = 7
}

{+display_result
if noun4(result) = 1
write " -- You bust."
return
endif
if noun4(result) = 2
write " -- Push"
return
endif
if noun4(result) = 3
write " -- Blackjack!"
return
endif
if noun4(result) = 4
write " -- Dealer got Blackjack."
return
endif
if noun4(result) = 5
write " -- Dealer bust."
return
endif
if noun4(result) = 6
write " -- You won."
return
endif
if noun4(result) = 7
write " -- Dealer won."
return
endif
}

{+deal_initial
; Set the number of hands for the player back to one (dealer can only have one)
set current_player(hands) = 1
set current_player(insurance) = 0
set current_hand = hand_one

; Reset the player's stats
set dealers_hand(aces) = 0
set dealers_hand(aces_as_one) = 0
set dealers_hand(total) = 0
set dealers_hand(cards) = 0

set hand_one(aces) = 0
set hand_one(aces_as_one) = 0
set hand_one(total) = 0
set hand_one(cards) = 0

set hand_two(aces) = 0
set hand_two(aces_as_one) = 0
set hand_two(total) = 0
set hand_two(cards) = 0

if PASSED_NEAR_END = true
execute "+shuffle_decks"
endif

; Deal the initial cards out in the correct order
execute "+deal_card<current_hand"
set FIRST_CARD = CURRENT_CARD
execute "+deal_card<dealers_hand"
execute "+deal_card<current_hand"

if current_hand(total) = 21
execute "+play_out_dealer"
else
execute "+display_table"
endif
}

{+display_table
if GAME_PHASE = place_bet
write "^No cards will be dealt until you place a bet. "
write "Use the command 'bet [amount]'.^"
return
endif

# Display the dealer's cards

if dealers_hand(cards) = 1
write "Dealer's card"
else
write "Dealer's cards"
endif

execute "+display_hand<dealers_hand"

# Display the player's first hand
if current_player(hands) = 1
write "Your cards -- Total: " hand_one(total)
else
write "First hand -- Total: " hand_one(total)
endif
write " -- Bet: $" hand_one(bet)

execute "+display_hand<hand_one"

if current_player(hands) = 2
; Display the player's second hand
write "Second hand -- Total: " hand_two(total)
write " -- Bet: $" hand_two(bet)

execute "+display_hand<hand_two"
endif
}

integer THIS_HAND

{+display_hand
set THIS_HAND = arg[0]

if GAME_PHASE = place_bet
write "^No cards will be dealt until you place a bet. Use the command 'bet [amount]'.^"
return
endif

style pre
write "^"
set INDEX = THIS_HAND(cards)
repeat
write " +---+"
set INDEX - 1
until INDEX = 0

write "^"

set INDEX = THIS_HAND(cards)
repeat
write " |   |"
set INDEX - 1
until INDEX = 0

write "^"

set INDEX = FIRST_CARD
repeat
if INDEX(parent) = THIS_HAND
execute "+display_card_console<INDEX"
endif
set INDEX = INDEX(next)
until INDEX = PAST_LAST

write "^"

set INDEX = THIS_HAND(cards)
repeat
write " |   |"
set INDEX - 1
until INDEX = 0

write "^"

set INDEX = THIS_HAND(cards)
repeat
write " +---+"
set INDEX - 1
until INDEX = 0

write "^"
style normal
}

{+display_final
; Display the dealer's cards
write "Dealer's cards -- Total: " dealers_hand(total)

execute "+display_hand<dealers_hand"

; Display the player's first hand
set current_hand = hand_one
if current_player(hands) = 1
write "Your cards -- Total: " hand_one(total)
else
write "First hand --- Total: " hand_one(total)
endif
write " -- Bet: $" hand_one(bet)
execute "+display_result<hand_one"
execute "+display_hand<hand_one"

if current_player(hands) = 2
; Display the player's second hand
write "Second hand -- Total: " hand_two(total)
write " -- Bet: $" hand_two(bet)
execute "+display_result<hand_two"
execute "+display_hand<hand_two"

endif
}

grammar omega2	>omega2

{+omega2
write "The current Omega-II count is "
execute "+display_count<OMEGA2-COUNT"
write ".^"
execute "+display_table"
}

grammar highlow	>highlow

{+highlow
write "The current HIGH-LOW count is "
execute "+display_count<HIGH-LOW-COUNT"
write ".^"
execute "+display_table"
}

grammar ko	>ko

{+ko
write "The current KO count is "
execute "+display_count<KO-COUNT"
write ".^"
execute "+display_table"
}

{+display_count
if arg[0] < 1
write arg[0]
else
write "+" arg[0]
endif
}

grammar bet $integer	>bet

{+bet
if GAME_PHASE = players_turn
write "You can't place a bet until the start of the next hand.^"
execute "+display_table"
return
endif
if $integer < 25 : $integer > 1000
write "This table has a minimum bet of $25 and a maximum bet of $1000.^"
execute "+display_table"
return
endif
set GAME_PHASE = players_turn
set current_player(money) - $integer
set current_hand(bet) = $integer
execute "+deal_initial"
}

object dealer : dealer
static
short			name "dealer"

object dealers_hand : dealer_hand

object kryten: myself self me james bond
has			ANIMATE
short			name "player one"
quantity		42
money			2000
parent		casino
player

object hand_one : hand one
short			name "first hand"

object hand_two : hand two
short			name "second hand"

integer TEMP
integer BACKUP

{+basic_strategy_check
if PREVIOUS_GAME_PHASE = place_bet : CHECK_STRATEGY = 0
return
endif
if last_move != best_move
write "^You should have " MOVE_TYPE[best_move] !^
endif
#write " (LAST: " MOVE_TYPE[last_move] "  BEST: " MOVE_TYPE[best_move] ")^"
}

{+basic_strategy_table
set current_hand(cards) = 3; DONT DO THE PAIRS CHECK AS THERE ARE NO REAL CARDS
set current_hand(aces) = 0;
set current_hand(aces_as_one) = 0;

set current_hand(total) = 4
# PLAYER LOOP
repeat
execute "+dealer_loop"
set current_hand(total) + 1
until current_hand(total) = 21
}

{+dealer_loop
set dealers_hand(total) = 2
repeat
execute "+basic_strategy_code"
if best_move = stay
write "S "
endif
if best_move = hit
write "H "
endif
if best_move = double
write "D "
endif
set dealers_hand(total) + 1
until dealers_hand(total) = 12
write "^"
}

{+basic_strategy_code
execute "+is_pair"
if current_hand(cards) = 2
if FIRST = SECOND
# CURRENT HAND IS A PAIR
if FIRST = 11
set best_move = split
return
endif
if FIRST = 10
set best_move = stay
return
endif
if FIRST = 9
if dealers_hand(total) = 7 : dealers_hand(total) > 9
set best_move = stay
else
set best_move = split
endif
return
endif
if FIRST = 8
set best_move = split
return
endif
if FIRST = 7
if dealers_hand(total) > 7
set best_move = hit
else
set best_move = split
endif
return
endif
if FIRST = 6
if dealers_hand(total) = 2 : dealers_hand(total) > 6
set best_move = hit
else
set best_move = split
endif
return
endif
if FIRST = 5
if dealers_hand(total) > 9
set best_move = hit
else
set best_move = double
endif
return
endif
if FIRST = 4
if dealers_hand(total) = 5 : dealers_hand(total) = 6
set best_move = split
else
set best_move = hit
endif
return
endif
# MUST BE A PAIR OF 3s OR 2s. BOTH HAVE SAME STRATEGY
if dealers_hand(total) < 5 : dealers_hand(total) > 7
set best_move = hit
else
set best_move = split
endif
return
endif
endif
if current_hand(aces) > current_hand(aces_as_one)
# CURRENT HAND IS A SOFT TOTAL
if current_hand(total) > 18
set best_move = stay
return
endif
if current_hand(total) = 18
if dealers_hand(total) > 8
set best_move = hit
else
set best_move = stay
endif
return
endif
set best_move = hit
return
endif
# CURRENT HAND IS A HARD TOTAL
if current_hand(total) > 16
set best_move = stay
return
endif
if current_hand(total) > 12
# HAND IS 13 TO 16
if dealers_hand(total) < 7
set best_move = stay
else
set best_move = hit
endif
return
endif
if current_hand(total) = 12
if dealers_hand(total) < 4 : dealers_hand(total) > 6
set best_move = hit
return
endif
set best_move = stay
endif
if current_hand(total) = 11
if dealers_hand(total) = 11
set best_move = hit
else
set best_move = double
endif
return
endif
if current_hand(total) = 10
if dealers_hand(total) > 9
set best_move = hit
else
set best_move = double
endif
return
endif
if current_hand(total) = 9
if dealers_hand(total) = 2 : dealers_hand(total) > 6
set best_move = hit
else
set best_move = double
endif
return
endif
set best_move = hit
}

{+top
set PREVIOUS_GAME_PHASE = GAME_PHASE
}

{+bottom
execute "+basic_strategy_check"
write "Bankroll: $" current_player(money)
if GAME_PHASE = place_bet
write "^At this point in the game you can: bet [amount]"
endif
if GAME_PHASE = players_turn
if current_player(hands) = 2
write " (currently playing " current_hand{the} ")"
endif
write "^At this point in the game you can:"
if current_hand(cards) = 2
if current_player(hands) = 1
if dealers_hand(cards) = 1
if dealers_hand(total) = 11
if current_player(insurance) = 0
write " insurance"
endif
endif
endif
endif
endif
if current_hand(cards) = 2
if current_player(hands) = 1
execute "+is_pair"
if FIRST = SECOND
write " split"
endif
endif
endif
if current_hand(total) = 9 : current_hand(total) = 10 : current_hand(total) = 11
if current_player(hands) = 2
if current_hand(cards) = 1
if DAS = 1
write " double"
endif
endif
else
if current_hand(cards) = 2
write " double"
endif
endif
endif
write " hit stay"
endif
write "^"
set score = current_player(money)
}
